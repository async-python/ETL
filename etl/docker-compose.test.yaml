version: '3.7'

volumes:
  postgres_volume:
  es_volume:
  redis_volume:
  static_volume:
  media_volume:

services:
  db_postgres:
    image: postgres:13.3-alpine
    container_name: db_postgres
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
      - ./scripts/postgres:/docker-entrypoint-initdb.d
    env_file:
      - ../.env
    restart: always
    expose:
      - 5432
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  db_redis:
    image: 'redis:6.2.6'
    container_name: db_redis
    volumes:
      - redis_volume:/usr/local/etc/redis/redis.conf
    env_file:
      - ../.env
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  db_elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    container_name: db_elastic
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es_volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:${ELASTIC_PORT}/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  django_app:
    image: "vardeath/django_movies:v1.1"
    container_name: django_app
    restart: always
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py makemigrations && 
             python manage.py migrate && 
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/code/static/
      - media_volume:/code/media/
    depends_on:
      db_postgres:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      - DEBUG_VALUE=False
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
